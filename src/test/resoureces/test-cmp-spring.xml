<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:p="http://www.springframework.org/schema/p"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd"
        default-autowire="byName">

    <context:component-scan base-package="com.aisinox"/>

    <bean id="cmpPropertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:test-cmp-global.properties</value>
                <value>classpath:test-cmp-redis.properties</value>
            </list>
        </property>
    </bean>

    <bean id="springUtils" class="com.aisino.admin.global.utils.SpringUtils"/>

    <bean id="allowUrls" class="java.util.HashSet">
        <constructor-arg>
            <set>
                <value>/global/login/login.do</value>
                <value>/global/login/loginout.do</value>
            </set>
        </constructor-arg>
    </bean>


    <!--&lt;!&ndash; 配置DataSource数据源 &ndash;&gt;-->
    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">-->
        <!--<property name="driverClass" value="${cmp.jdbc.driver}"/>-->
        <!--<property name="jdbcUrl" value="${cmp.jdbc.url}"/>-->
        <!--<property name="user" value="${cmp.jdbc.username}"/>-->
        <!--<property name="password" value="${cmp.jdbc.password}"/>-->
        <!--<property name="maxPoolSize" value="${cmp.jdbc.maxActive}"/>-->
        <!--<property name="maxIdleTime" value="${cmp.jdbc.maxIdle}"/>-->
        <!--<property name="acquireRetryAttempts">-->
            <!--<value>30</value>-->
        <!--</property>-->
        <!--<property name="acquireRetryDelay">-->
            <!--<value>100</value>-->
        <!--</property>-->
        <!--<property name="preferredTestQuery" value="SELECT NOW() FROM DUAL"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 创建SqlSessionFactory，同时指定数据源 &ndash;&gt;-->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml"></property>-->
    <!--</bean>-->

    <bean id="globalConfig" class="java.util.HashMap">
        <constructor-arg>
            <map>
                <entry key="dataserver.ip">
                    <value>${dataserver.ip}</value>
                </entry>
                <entry key="dataserver.port">
                    <value>${dataserver.port}</value>
                </entry>
                <entry key="dataserver.cmpApi.get">
                    <value>${dataserver.cmpApi.get}</value>
                </entry>
                <entry key="dataserver.cmpApi.put">
                    <value>${dataserver.cmpApi.put}</value>
                </entry>
                <entry key="dataserver.cmpApi.post">
                    <value>${dataserver.cmpApi.post}</value>
                </entry>
                <entry key="dataserver.cmpApi.delete">
                    <value>${dataserver.cmpApi.delete}</value>
                </entry>
                <entry key="dataserver.cmpApi.check">
                    <value>${dataserver.cmpApi.check}</value>
                </entry>
                <entry key="dataserver.cmpApi.modify">
                    <value>${dataserver.cmpApi.modify}</value>
                </entry>
                <entry key="redis.prefixCard">
                    <value>${cmp.redis.prefixCard}</value>
                </entry>
                <entry key="redis.cardDeletePrefix">
                    <value>${cmp.redis.cardDeletePrefix}</value>
                </entry>
                <entry key="card.delete.frequency">
                    <value>${card.delete.frequency}</value>
                </entry>
                <entry key="card.delete.total">
                    <value>${card.delete.total}</value>
                </entry>
                <entry key="data.analysis.web.company.ip">
                    <value>${data.analysis.web.company.ip}</value>
                </entry>
                <entry key="data.analysis.web.company.port">
                    <value>${data.analysis.web.company.port}</value>
                </entry>
                <entry key="data.analysis.web.company.url">
                    <value>${data.analysis.web.company.url}</value>
                </entry>
                <entry key="usercenter.syncuser.ip">
                    <value>${usercenter.syncuser.ip}</value>
                </entry>
                <entry key="usercenter.syncuser.port">
                    <value>${usercenter.syncuser.port}</value>
                </entry>
                <entry key="usercenter.syncuser.url">
                    <value>${usercenter.syncuser.url}</value>
                </entry>
                <entry key="usercenter.syncuser.param">
                    <value>${usercenter.syncuser.param}</value>
                </entry>
                <entry key="usercenter.syncuser.usercenteraip.key">
                    <value>${usercenter.syncuser.usercenteraip.key}</value>
                </entry>
                <entry key="code.prepare.assign.pool">
                    <value>${code.prepare.assign.pool}</value>
                </entry>
            </map>
        </constructor-arg>
    </bean>

    <bean id="cmpJedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${cmp.redis.pool.maxTotal}"/>
        <property name="maxIdle" value="${cmp.redis.pool.maxIdle}"/>
        <property name="maxWaitMillis" value="${cmp.redis.pool.maxWaitMillis}"/>
        <property name="testOnBorrow" value="${cmp.redis.pool.testOnBorrow}"/>
    </bean>

    <bean id="cmpJedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg name="host" value="${cmp.redis.ip}"></constructor-arg>
        <constructor-arg name="port" value="${cmp.redis.port}"></constructor-arg>
        <constructor-arg name="poolConfig" ref="cmpJedisPoolConfig"></constructor-arg>
    </bean>

    <bean name="companyApi"
          class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean">
        <property name="serviceUrl" value="${usercenter.url}/remote/allow/userCenterOrgDataRmtService"></property>
        <property name="serviceInterface" value="com.aisino.projects.usercenter.redis.support.service.IUserCenterRedisService"></property>
    </bean>
    <!--<import resource="classpath*:com/aisino/admin/**/*spring*.xml"/>-->
</beans>